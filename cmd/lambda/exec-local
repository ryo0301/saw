#!/bin/bash

set -o pipefail
set -e

for opt in "$@"; do
  case "$opt" in
    "--list-options")
      echo --list-options
      echo --alias-key
      echo --external-id
      echo --token-code
      echo --function-name
      echo --function-region
      echo --function-module-path
      echo --function-payload-path
      echo --function-payload-body
      echo --function-environment-path
      echo --reload-config
      exit
      ;;
    "--alias-key")
      if [ -n "$2" ]; then
        alias_key="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--external-id")
      if [ -n "$2" ]; then
        external_id="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--token-code")
      if [ -n "$2" ]; then
        token_code="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--function-name")
      if [ -n "$2" ]; then
        func_name="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--function-region")
      if [ -n "$2" ]; then
        func_region="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--function-handler-path")
      if [ -n "$2" ]; then
        func_handler_path="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--function-payload-path")
      if [ -n "$2" ]; then
        func_payload_path="$2"
        func_payload_body="$(cat $func_payload_path)"
        shift 2
      else
        shift 1
      fi
      ;;
    "--function-payload-body")
      if [ -n "$2" ]; then
        func_payload_body="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--function-environment-path")
      if [ -n "$2" ]; then
        func_env_path="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--reload-config")
      reload_config=1
      shift 1
      ;;
  esac
done


if [ -z "$func_name" ]; then
  echo "[require] --function-name" 1>&2
  exit 1
fi


map=$(cat $SAW_DIR_CONF/accounts.json)

alias_key=${alias_key:-"$(echo $map | jq -r .default.alias_key)"}
external_id=${external_id:-"$(echo $map | jq -r .default.external_id)"}
reload_config=${reload_config:-0}

account_id=$(echo $map | jq -r .accounts.$alias_key.account_id)
default_region="$(echo $map | jq -r .default.region)"

invoker="$SAW_DIR_LIB/lambda/invoke.js"
cache_prefix="$SAW_DIR_CACHE/lambda/${alias_key}"
cache_path="${cache_prefix}/${func_name}"

if [ -z "$SAW_DEFAULT_PROFILE" ]; then
  role_name="lambda-dev"
  profile="${alias_key}-${role_name}"
  saw iam assume-role --alias-key $alias_key --role-name $role_name --external-id $external_id > /dev/null
else
  profile="$SAW_DEFAULT_PROFILE"
fi


conf=""
if [ -r "$cache_path" -a $reload_config -eq 0 ]; then
  conf="$(cat $cache_path)"
else
  conf=$(aws --profile $profile lambda get-function-configuration --function-name $func_name)
  [ $? -ne 0 ] && exit 1
  mkdir -p $cache_prefix
  echo "$conf" > $cache_path
fi

func_region=${func_region:-"$default_region"}
func_payload_body=${func_payload_body:-""}
func_handler_path=${func_handler_path:-"$(pwd)/index.js"}
func_handler_string=$(echo "$conf" | jq -r .Handler)
func_role=$(echo "$conf" | jq -r .Role)
func_timeout=$(echo "$conf" | jq -r .Timeout)
func_mem=$(echo "$conf" | jq -r .MemorySize)
func_ver=$(echo "$conf" | jq -r .Version)
func_arn=$(echo "$conf" | jq -r .FunctionArn)

export AWS_REGION="$func_region"
export AWS_LAMBDA_HANDLER_PATH="$func_handler_path"
export AWS_LAMBDA_HANDLER_STRING="$func_handler_string"
export AWS_LAMBDA_PAYLOAD_BODY="$func_payload_body"
export AWS_LAMBDA_FUNCTION_NAME="$func_name"
export AWS_LAMBDA_TIMEOUT="$func_timeout"
export AWS_LAMBDA_MEMORY_LIMIT="$func_mem"
export AWS_LAMBDA_FUNCTION_VERSION="$func_ver"
export AWS_LAMBDA_FUNCTION_ARN="$func_arn"


creds=$(aws --profile $profile sts assume-role --role-arn $func_role --role-session-name in-office)
[ $? -ne 0 ] && exit 1

export AWS_ACCESS_KEY_ID=$(echo "$creds" | jq -r .Credentials.AccessKeyId)
export AWS_SECRET_ACCESS_KEY=$(echo "$creds" | jq -r .Credentials.SecretAccessKey)
export AWS_SESSION_TOKEN=$(echo "$creds" | jq -r .Credentials.SessionToken)


if [ -n "$func_env_path" ]; then
  for key in $(jq -r keys[] $func_env_path); do
    export $key=$(jq -r .$key $func_env_path)
  done
fi


node $invoker
