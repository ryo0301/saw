#!/bin/bash

set -o pipefail
set -e

for opt in "$@"; do
  case "$opt" in
    "--list-options")
      echo --list-options
      echo --alias-key
      echo --external-id
      echo --token-code
      echo --function-name
      echo --zip-path
      echo --publish
      exit
      ;;
    "--alias-key")
      if [ -n "$2" ]; then
        alias_key="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--external-id")
      if [ -n "$2" ]; then
        external_id="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--token-code")
      if [ -n "$2" ]; then
        token_code="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--function-name")
      if [ -n "$2" ]; then
        func_name="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--zip-path")
      if [ -n "$2" ]; then
        zip_path="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--publish")
      publish_new_version=1
      shift 1
      ;;
  esac
done


map=$(cat $SAW_DIR_CONF/accounts.json)

alias_key=${alias_key:-"$(echo $map | jq -r .default.alias_key)"}
external_id=${external_id:-"$(echo $map | jq -r .default.external_id)"}


if [ -z "$SAW_DEFAULT_PROFILE" ]; then
  role_name="lambda-dev"
  profile="${alias_key}-${role_name}"
  saw iam assume-role --alias-key $alias_key --role-name $role_name --external-id $external_id --token-code $token_code > /dev/null
else
  profile="$SAW_DEFAULT_PROFILE"
fi

if [ -z "$zip_path" ]; then
  npm run build > /dev/null 2>&1
  if [ $? -eq 0 ]; then
    zip_path="$(pwd)/${func_name}.zip"
  fi
fi

publish_opt="--no-publish"
if [ "$publish_new_version" = "1" ]; then
  publish_opt="--publish"
fi

aws lambda update-function-code --profile $profile --function-name $func_name --zip-file fileb://$zip_path $publish_opt
