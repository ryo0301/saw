#!/bin/bash

set -e

for opt in "$@"; do
  case "$opt" in
    "--list-options")
      echo --list-options
      echo --alias-key
      echo --role-name
      echo --external-id
      echo --token-code
      echo --prompt-for-token
      echo --no-cache
      echo --quiet
      exit
      ;;
    "--alias-key")
      if [ -n "$2" ]; then
        alias_key="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--role-name")
      if [ -n "$2" ]; then
        role_name="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--external-id")
      if [ -n "$2" ]; then
        external_id="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--token-code")
      if [ -n "$2" ]; then
        token_code="$2"
        shift 2
      else
        shift 1
      fi
      ;;
    "--prompt-for-token")
      prompt_for_token=1
      shift 1
      ;;
    "--no-cache")
      nocache=1
      shift 1
      ;;
    "--quiet")
      quiet=1
      shift 1
      ;;
  esac
done


map=$(cat $SAW_DIR_CONF/accounts.json)

alias_key=${alias_key:-"$(echo $map | jq -r .default.alias_key)"}
role_name=${role_name:-"$(echo $map | jq -r .default.role_name)"}
external_id=${external_id:-"$(echo $map | jq -r .default.external_id)"}
token_code=${token_code:-""}
prompt_for_token=${prompt_for_token:-0}
nocache=${nocache:-0}
quiet=${quiet:-0}

if [ -n "$token_code" ]; then
  prompt_for_token=1
fi


cache_prefix="$SAW_DIR_CACHE/iam/${alias_key}"
cache_path="${cache_prefix}/${role_name}"

do_assume_role=0
if [ $nocache -eq 1 ]; then
  do_assume_role=1
elif [ ! -r $cache_path ]; then
  do_assume_role=1
else
  expire=$(cat $cache_path)
  expire_timestamp=$(date -u -jf '%FT%TZ' "$expire" +%s)
  now_timestamp=$(date -u +%s)
  [ $now_timestamp -ge $expire_timestamp ] && do_assume_role=1
fi


assumed_profile="$alias_key-$role_name"

if [ $do_assume_role -eq 1 ]; then
  account_id=$(echo $map | jq -r .accounts.$alias_key.account_id)
  delegate_alias_key="$(echo $map | jq -r .default.alias_key)"
  delegate_account_id="$(echo $map | jq -r .accounts.$delegate_alias_key.account_id)"
  default_region="$(echo $map | jq -r .default.region)"
  if [ $prompt_for_token -eq 1 ]; then
    echo -n "MFA token: "
    read token_code
  fi

  cmd="aws sts assume-role \
    --role-arn arn:aws:iam::$account_id:role/delegate-$role_name \
    --role-session-name in-office \
    --external-id $external_id"
  if [ -n "$token_code" ]; then
    cmd="$cmd \
      --serial-number arn:aws:iam::$delegate_account_id:mfa/hideno-delegate \
      --token-code $token_code"
  fi

  creds=$($cmd)

  access_key_id=$(echo $creds | jq -r .Credentials.AccessKeyId)
  secret_access_key=$(echo $creds | jq -r .Credentials.SecretAccessKey)
  session_token=$(echo $creds | jq -r .Credentials.SessionToken)
  expiration=$(echo $creds | jq -r .Credentials.Expiration)

  aws configure set region $default_region --profile $assumed_profile
  aws configure set aws_access_key_id $access_key_id --profile $assumed_profile
  aws configure set aws_secret_access_key $secret_access_key --profile $assumed_profile
  aws configure set aws_session_token $session_token --profile $assumed_profile

  mkdir -p $cache_prefix
  echo "$expiration" > $cache_path
fi


if [ $quiet -eq 0 ]; then
  aws configure list --profile $assumed_profile
else
  aws configure list --profile $assumed_profile > /dev/null 2>&1
fi
